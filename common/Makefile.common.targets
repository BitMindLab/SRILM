#
#    File:   Makefile.common.targets
#    Author: The SRI DECIPHER (TM) System
#    Date:   Tue Nov  3 23:45:49 1992
#
#    Description:
#	This file provides the common "make" targets shared by the
#	DECIPHER (TM) subsystems.  Include this file in the targets
#	section of a makefile to use the shared definitions. 
#       (Typically, the "include" should be the last command in the
#       makefile.) 
#
#    Copyright (c) 1992, SRI International.  All Rights Reserved.
#
#    RCS ID: $Id: Makefile.common.targets,v 1.19 1998/11/12 01:48:04 stolcke Exp $
#
#    $Log: Makefile.common.targets,v $
#    Revision 1.19  1998/11/12 01:48:04  stolcke
#    pass OPTION_FLAGS to linker
#
#    Revision 1.18  1997/12/31 22:58:46  stolcke
#    pass PROGRAM_NAMES to submake for purify target
#
#    Revision 1.17  1997/07/22 16:57:11  stolcke
#    guard release-headers against empty header list
#
#    Revision 1.17  1997/07/21 14:37:06  stolcke
#    avoid error when RELEASED_HEADERS is empty
#
#    Revision 1.16  1997/07/17 16:04:10  stolcke
#    propagate OPTION to purify run
#
#    Revision 1.15  1996/08/16 14:27:21  stolcke
#    added dekai's cleanup fixes
#
#    Revision 1.14  1996/06/21 03:29:59  stolcke
#    fixed ii_files location
#
#    Revision 1.13  1996/06/10 06:13:39  stolcke
#    remove template db on clean
#
#    Revision 1.12  1996/06/09 23:03:46  stolcke
#    locate helper scripts in $DECIPHER/bin
#
#    Revision 1.11  1995/08/15 21:02:33  decipher
#    Fixed bug in release-scripts: Now checks RELEASED_SCRIPTS
#    instead of RELEASED_LIBRARIES.
#
#    Revision 1.10  1995/06/22 03:07:52  stolcke
#    fixed typo
#
#    Revision 1.9  1995/06/21 02:05:15  stolcke
#    call GEN_DEP only if source list is non-empty
#
#    Revision 1.8  1995/06/19 02:45:16  stolcke
#    added C++ support
#
#    Revision 1.8  1995/06/19 02:08:21  stolcke
#    added C++ support
#
# Revision 1.7  1995/04/24  19:41:25  stolcke
# added purify support
#
# Revision 1.6  1995/03/08  02:49:28  stolcke
# create directories on demand
# reinstall only binaries that changed
#
# Revision 1.5  1994/12/08  01:27:38  decipher
# install target uses DECIPHER_BIN
#
# Revision 1.4  1994/12/03  23:42:37  decipher
# Updated to add new release-* targets and use new install syntax.
# Also adds Lint targets.
#
# Revision 1.3  1993/03/26  18:33:37  decipher
# Added the "libraries" and "programs" targets.
#
# Revision 1.2  1993/01/30  02:14:31  decipher
# Improved the "make depend" feature.
#
# Revision 1.1  1993/01/25  02:39:28  decipher
# Initial revision
#
#


# Create the initial directory structure (assumes "src" exists).
init:
	-cd ..; $(DECIPHER)/bin/make-standard-directories

# Delete all of the files which can be automatically regenerated.
pristine:
	-cd ..; $(DECIPHER)/bin/remove-standard-directories

# Make all, using optimize options.
optimize:
	$(MAKE) OPTION=$(OPTIMIZE_OPTION) all

# Make all, using debug options.
debug:
	$(MAKE) OPTION=$(DEBUG_OPTION) all

# Make all, using profile options.
profile:
	$(MAKE) OPTION=$(PROFILE_OPTION) all

# Make all, using export options.
export:
	$(MAKE) OPTION=$(EXPORT_OPTION) all

# Make programs, using purify
purify:
	$(MAKE) OPTION=$(OPTION) BIN_OPTION=_pure LINK.c="$(PURIFY) $(PURIFY_FLAGS) $(LINK.c)" LINK.cc="$(PURIFY) $(PURIFY_FLAGS) $(LINK.cc)" PROGRAM_NAMES="$(PROGRAM_NAMES)" programs

.PHONY: libraries programs

# Make all libraries.
libraries:	$(ALL_LIBRARIES)

# Make all programs.
programs:	$(ALL_PROGRAMS)

# XXX -- This is disabled for now, since it frequently causes excess re-compilation.
# Make sure all objects depend on the makefiles.
#$(ALL_OBJECTS):	Makefile \
#                       $(DECIPHER)/common/Makefile.common.variables \
#                       $(DECIPHER)/common/Makefile.common.targets

# Cancel the rules which put the compilation results in the source
#  directory.  (Note:  This avoids problems with source files which
#  have the same root name as make targets.)
%:	%.c
%.o:	%.c


#
# These dependencies create the necessary target directories on demand,
# but avoid doing so only once per module.
#
OBJDIR_STAMP = $(OBJDIR)/STAMP
BINDIR_STAMP = $(BINDIR)/STAMP

$(ALL_OBJECTS): $(OBJDIR_STAMP)
$(ALL_PROGRAMS): $(BINDIR_STAMP)

$(OBJDIR_STAMP) $(BINDIR_STAMP):
	-mkdir $(dir $@)
	touch $@

# Default C compiling pattern-matching rule:
$(OBJDIR)/%.o:	$(SRCDIR)/%.c
	$(COMPILE.c) $(OPTION_FLAGS) $(OUTPUT_OPTION) $<

# Support for C++ compulation
%:	%.cc
%.o:	%.cc

# Default C compiling pattern-matching rule:
$(OBJDIR)/%.o:	$(SRCDIR)/%.cc
	$(COMPILE.cc) $(OPTION_FLAGS) $(OUTPUT_OPTION) $<

# Program linking
# The heuristic here is that if any C++ source is present at all
# we use the C++ driver to link the whole thing, otherwise the C driver
$(BINDIR)/%: $(OBJDIR)/%.o $(LIBRARY)
ifeq ($(filter %.cc,$(ALL_SOURCES)), )
	$(LINK.c) $(OPTION_FLAGS) -o $@ $< -L$(DECIPHER_LIBDIR) $(LIBRARIES) $(DEMANGLE_FILTER)
else
	$(LINK.cc) $(OPTION_FLAGS) -o $@ $< -L$(DECIPHER_LIBDIR) $(LIBRARIES) $(DEMANGLE_FILTER)
endif

# revised release targets and dependencies:

.PHONY : release release-headers release-libraries release-programs release-scripts

release-headers:	$(EXPORTED_HEADERS)
ifneq ($(EXPORTED_HEADERS), )
	-$(INSTALL) 0444 $^ $(DECIPHER_INCDIR)
endif

RELEASED_LIBRARIES = $(EXPORTED_LIBRARIES:$(OBJDIR)/%.a=$(DECIPHER_LIBDIR)/%.a)

# We want to re-install only only those binaries that have changed, and
# use make to figure out the things that need updating.  However,
# gnumake isn't smart enough to process this dependency in
# conjunction with the rules for library creation.  So we first make sure
# all libraries are uptodate, then do a recursive make to do the installation.
# And take care not to run $(MAKE) without arguments.
# Same applies to $(RELEASED_PROGRAMS) and $(RELEASED_SCRIPTS) below.

release-libraries:	libraries
ifneq ($(RELEASED_LIBRARIES), )
	$(MAKE)	$(RELEASED_LIBRARIES)
endif

$(DECIPHER_LIBDIR)/%.a:	$(OBJDIR)/%.a
	-$(INSTALL) 0644 $^ $(DECIPHER_LIBDIR)

RELEASED_PROGRAMS = $(EXPORTED_PROGRAMS:$(BINDIR)/%=$(DECIPHER_BINDIR)/%)

release-programs:	programs
ifneq ($(RELEASED_PROGRAMS), )
	$(MAKE)	programs $(RELEASED_PROGRAMS)
endif

$(DECIPHER_BINDIR)/%:	$(BINDIR)/%
	-$(INSTALL) 0555 $^ $(DECIPHER_BINDIR)

RELEASED_SCRIPTS = $(EXPORTED_SCRIPTS:%=$(DECIPHER_BIN)/%)

release-scripts:	$(EXPORTED_SCRIPTS)
ifneq ($(RELEASED_SCRIPTS), )
	$(MAKE) $(RELEASED_SCRIPTS)
endif

$(DECIPHER_BIN)/%:	%
	-$(INSTALL) 0555 $^ $(DECIPHER_BIN)


# Dependency tracing target
depend:
	$(RM) $(DEPENDENCIES)
ifneq ($(filter %.c,$(ALL_SOURCES)), )
	$(GEN_DEP) $(filter %.c,$(ALL_SOURCES)) | sed -e "s&^\([^ ]\)&$(BASE_OBJDIR)"'$$(OBJ_OPTION)'"/\1&g" >> $(DEPENDENCIES)
endif
ifneq ($(filter %.cc,$(ALL_SOURCES)), )
	$(GEN_DEP.cc) $(filter %.cc,$(ALL_SOURCES)) | sed -e "s&^\([^ ]\)&$(BASE_OBJDIR)"'$$(OBJ_OPTION)'"/\1&g" >> $(DEPENDENCIES)
endif
	$(DECIPHER)/bin/generate-program-dependencies $(BASE_BINDIR) $(BASE_OBJDIR) $(ALL_PROGRAM_NAMES) >> $(DEPENDENCIES)

# Targets for cleaning up
clean:		remove-objects
cleaner:	clean remove-dependencies remove-libraries
cleanest:	cleaner remove-programs

remove-objects:
	-$(RM) $(OBJDIR)/*.o
	-$(RM) $(OBJDIR)/*.rpo
	-$(RM) -r $(OBJDIR)/Templates.DB ./ii_files

remove-dependencies:
	-$(RM) Dependencies.$(MACHINE_TYPE)

remove-libraries:
	-$(RM) $(ALL_LIBRARIES)

remove-programs:
	-$(RM) $(ALL_PROGRAMS)


# Default Lint pattern-matching rule:
$(SRCDIR)/%.lint:	$(SRCDIR)/%.c
	$(LINT) $(LINT_FLAGS) $< > $@

# Lint rules:
lint:	$(ALL_LINT)
remove-lint:
	$(RM) $(ALL_LINT)


# Include the dependencies generated by "make depend" if they exist.
ifeq ($(shell ls $(DEPENDENCIES) 2> /dev/null), $(DEPENDENCIES))
   include $(DEPENDENCIES)
endif
