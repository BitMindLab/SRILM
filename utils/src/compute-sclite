#!/bin/sh
#
# compute-sclite --
#	compute word error rate from a sentid hyp file and a sentid reference
#	file, using the NIST 'sclite' program
#
# $Header: /home/srilm/devel/utils/src/RCS/compute-sclite,v 1.8 1998/01/09 02:35:47 stolcke Exp $
#

basedir=`dirname $0`

if [ $# -lt 2 ]; then
	echo "usage: $0 [-v] -h hyps -r refs [-S id-subset] [sclite-options ...]" >&2
	echo "   or  $0 hyps refs" >&2
	exit 2
elif [ $# -eq 2 ]; then
	# old syntax
	hyps=${1}
	refs=${2}
else
	# parse arguments
	while [ $# -gt 0 ]; do
		case "$1" in
		-v)	verbose=1 ;;
		-r)	refs=$2; shift ;;
		-h)	hyps=$2; shift ;;
		-S)	subset=$2; shift ;;
		*)	options="$options $1" ;;
		esac
		shift
	done
fi

name=`basename $hyps`

sentids=/tmp/ce.sentids$$
sortedrefs=/tmp/ce.refs$$
sortedhyps=/tmp/ce.hyps$$

trap '/bin/rm -f $sentids $sortedrefs $sortedhyps' 0 1 2 13 15

#
# extract and sort sentids from hyps
#
gawk '{ print $1 }' $hyps | sort |\
if [ -n "$subset" ]; then
	join - $subset
else
	cat
fi > $sentids


#
# extract and sort refs for these sentids
#
sort $refs | join - $sentids | \
 sed -e 's,\[[^]]*\],,g' | \
 $basedir/sentid-to-sclite \
	> $sortedrefs

#
# sort and condition hyps
#
sort $hyps | join - $sentids | \
 sed -e 's,\[[^]]*\],,g' \
	-e 's,<[^>]*>,,g' \
	-e 's,@reject@,,g' \
	-e 's,-pau-,,g' | \
 $basedir/sentid-to-sclite \
	> $sortedhyps

[ "$verbose" ] && set -x

sclite -f 0 -O . -n $name \
	-h $sortedhyps trn $name -r $sortedrefs trn  \
	-i swb $options

