#!/usr/local/bin/gawk -f
#
# nbest2pfsg --
#	convert Decipher N-best list to PFSG lattice
#
# $Header: /home/srilm/devel/utils/src/RCS/make-nbest-pfsg,v 1.1 1997/11/15 05:50:35 stolcke Exp $
#
BEGIN {
	initial = 0;
	final = 1;
	nodecount = 2;
	transcount = 0;

	outputs[initial] = outputs[final] = "NULL";

	format = 0;
	name = "";
}

function start_hyp() {
	lastnode = initial;
}

function add_word(word, weight) {

	nextnode = trans[lastnode " " word];
	if (nextnode) {
		#if (weights[lastnode " " nextnode] != weight) {
		#	printf "inconsistent weight for transition %s -> %s\n",\
		#		lastnode, nextnode > "/dev/stderr";
		#	exit 1;
		#}

		lastnode = nextnode;
	} else {
		newnode = nodecount ++;
		outputs[newnode] = word;

		trans[lastnode " " word] = newnode;
		#weights[lastnode " " newnode] = weight;
		transcount ++;

		lastnode = newnode;
	}
}

function end_hyp() {
	nextnode = trans[lastnode " NULL"];
	if (!nextnode) {
		trans[lastnode " NULL"] = final;
		#weights[lastnode " " final] = 0;
		transcount ++;
	}
}

function print_pfsg(name) {

	printf "name %s\n", name;
	printf "nodes %d", nodecount;
	for (node = 0; node < nodecount; node ++) {
		printf " %s", outputs[node];
	}
	printf "\n";

	printf "initial %d\n", initial;
	printf "final %d\n", final;

	printf "transitions %d\n", transcount;

	for (from_word in trans) {
		split(from_word, a);
		fromnode = a[1];
		tonode = trans[from_word]

		printf "%d %d %d\n", fromnode, tonode, 0;
		#	weights[fromnode " " tonode];
	}
	printf "\n";
}

/^NBestList1\.0$/ {
	format = 1;
	next;
}
/^NBestList2\.0$/ {
	format = 2;
	next;
}
format == 0 {
	start_hyp();
	for (i = 4; i <= NF; i ++) {
		add_word($i, 0);
	}
	end_hyp();
	next;
}
format == 1 {
	start_hyp();
	for (i = 2; i <= NF; i ++) {
		add_word($i, 0);
	}
	end_hyp();
	next;
}
format == 2 {
	start_hyp();
	for (i = 2; i <= NF; i += 11) {
		add_word($i, $(i + 7));
	}
	end_hyp();
	next;
}
END {
	if (!name) {
		name = FILENAME;
	}
	print_pfsg(name);
}

